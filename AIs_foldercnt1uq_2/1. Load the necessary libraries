# 1. Load the necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import numpy as np
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import FunctionTransformer

# Define a custom function to preprocess the 'engine' column
def preprocess_engine_column(data):
    # Extract the numerical values from the 'engine' column
    data['engine_num'] = data['engine'].str.extract(r'([\d.]+)').astype(float)
    return data[['engine_num']]

# 2. Load the training data
train_data = pd.read_csv('train_car.csv')

# 3. Check the columns in the training data
print(train_data.columns)

# 4. Verify the presence of the 'price' column in training data
if 'price' in train_data.columns:
    # 5. Split the data into features and target variable
    X = train_data.drop(columns=['price'])
    y = train_data['price']

    # 6. Preprocess categorical columns
    categorical_cols = ['brand', 'model', 'fuel_type', 'transmission', 'ext_col', 'int_col', 'accident', 'clean_title']
    preprocess_categorical = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), categorical_cols)], remainder='passthrough')

    # 7. Preprocess the 'engine' column
    preprocess_engine = FunctionTransformer(preprocess_engine_column)

    # 8. Combine the preprocessors
    preprocessor = ColumnTransformer(transformers=[('cat', preprocess_categorical, categorical_cols), ('engine', preprocess_engine, ['engine'])])

    # 9. Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # 10. Train the model
    model = LinearRegression()
    model.fit(preprocessor.fit_transform(X_train), y_train)

    # 11. Make predictions on the test set
    predictions = model.predict(preprocessor.transform(X_test))

    # 12. Calculate the root mean squared error
    rmse = np.sqrt(mean_squared_error(y_test, predictions))
    print('Root Mean Squared Error:', rmse)

    # 13. Load the test data
    test_data = pd.read_csv('test_car.csv')

    # 14. Preprocess test data
    test_predictions = model.predict(preprocessor.transform(test_data))

    # 15. Create a submission file
    submission = pd.DataFrame({'Id': test_data['id'], 'Price': test_predictions})
    submission.to_csv('submission.csv', index=False)
else:
    print("Error: 'price' column not found in the training data. Please check the column names.")